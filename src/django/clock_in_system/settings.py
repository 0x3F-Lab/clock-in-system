"""
Django settings for clock_in_system project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from celery.schedules import crontab


def str_to_bool(value):
    """Convert environment variable string to boolean."""
    return value.lower() in ["true", "1", "yes"]


#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
######################################################
#          PLEASE CHANGE THIS EVERY VERSION          #
STATIC_CACHE_VER = "v1.1.0"  #
#  Must be increased for any change to static files  #
######################################################
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

LOGIN_URL = "/login"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "DJANGO_SECRET_KEY",
    "django-insecure-7!xp6vs%4*%t5bqw*5a%l1@#0(8k-zjr14x0%c3^ey&k4qr@5c",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True") == "True"

# Get the BASE_URL from the environment
BASE_URL = os.getenv(
    "BASE_URL", "http://localhost:8000"
)  # Default to localhost if not set

# Parse ALLOWED_HOSTS from environment variable
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost").split(",")

# Cookies
SESSION_COOKIE_AGE = 604800  # 7 days
SESSION_EXPIRE_AT_BROWSER_CLOSE = (
    False  # Set to True if you want the session to end on browser close
)

# Secure cookie settings
CSRF_USE_SESSIONS = False  # Disabled as it can break for some users who disable presistent sessions/cookies.
CSRF_COOKIE_AGE = 604800
CSRF_COOKIE_SECURE = str_to_bool(
    os.getenv("CSRF_COOKIE_SECURE", "False")
)  # Use True in production to send cookies over HTTPS only
CSRF_COOKIE_HTTPONLY = True  # Default is False; True prevents JavaScript access
CSRF_COOKIE_SAMESITE = os.getenv(
    "CSRF_COOKIE_SAMESITE", "Lax"
)  # Can be 'Lax', 'Strict', or 'None'
CSRF_TRUSTED_ORIGINS = os.getenv(
    "CSRF_TRUSTED_ORIGINS",
    "http://localhost:8000,http://localhost,http://127.0.0.1:8000,http://127.0.0.1",
).split(",")

# CORS settings
CORS_ALLOWED_ORIGINS = os.getenv(
    "CORS_ALLOWED_ORIGINS",
    "http://localhost:8000,http://localhost,http://127.0.0.1:8000,http://127.0.0.1",
).split(",")
CORS_TRUSTED_ORIGINS = os.getenv(
    "CORS_TRUSTED_ORIGINS",
    "http://localhost:8000,http://localhost,http://127.0.0.1:8000,http://127.0.0.1",
).split(",")
CORS_ALLOW_CREDENTIALS = False  # App currently doesnt use any authorisation cross-site (SET TO TRUE IF ENDPOINTS ON DIFF DOMAINS I.E. API ON api.domain.com -- then withCredentials is needed for js ajax requests)
CORS_PREFLIGHT_MAX_AGE = 43200  # Cache for 12 hours
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sitemaps",
    "corsheaders",
    "widget_tweaks",
    "django_celery_beat",
    "api",
    "auth_app",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "clock_in_system.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "auth_app.base_url_context_processor.base_url",
            ],
        },
    },
]

WSGI_APPLICATION = "clock_in_system.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", "clock_in_system"),
        "USER": os.getenv("POSTGRES_USER", "postgres"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", "InsEcuR3Pa55w0Rd"),
        "HOST": os.getenv("POSTGRES_HOST", "localhost"),
        "PORT": os.getenv("POSTGRES_PORT", "5432"),
    }
}

# Django cache to store the more temporary info (i.e. public holiday checks)
if DEBUG:  # Use memory for development (saves the file permission errors)
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "django_cache",
        }
    }
else:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
            "LOCATION": "/app/django_cache",
        }
    }

############################### CELERY CONFIGURATION ############################################
CELERY_BROKER_URL = os.getenv(
    "CELERY_BROKER_URL", "redis://:securepassword@redis:6379/0"
)  # Redis broker URL (with password if required)
CELERY_RESULT_BACKEND = os.getenv(
    "CELERY_RESULTS_BACKEND", "redis://:securepassword@redis:6379/1"
)  # Use Django's database to store task results
CELERY_CACHE_BACKEND = "redis"  # Cache backend for storing temporary task states
CELERY_ACCEPT_CONTENT = ["json"]  # Data format for tasks
CELERY_TASK_SERIALIZER = "json"  # Serialize task data as JSON
CELERY_RESULT_SERIALIZER = "json"  # Serialize results as JSON
CELERY_TIMEZONE = os.getenv(
    "TZ", "Australia/Perth"
)  # Set the default timezone (you can change this to your preferred timezone)
CELERY_ENABLE_UTC = False  # Keep local time (for schedules)

CELERY_TASK_RESULT_EXPIRES = 345600  # Results expire after 4 days
CELERY_TASK_DEFAULT_RETRY_DELAY = 30  # Retry delay in seconds
CELERY_TASK_MAX_RETRIES = 5  # Max number of retries for a task
CELERY_TASK_TIME_LIMIT = 300  # Max time in seconds for a task to complete
CELERY_TASK_SOFT_TIME_LIMIT = (
    240  # Soft limit (will raise SoftTimeLimitExceeded exception)
)

# Celery Beat Configuration for Periodic Tasks (Cron-like jobs)
### !! TO ENSURE TASKS ARE CORRECTLY SET ON TIME, THE DOCKER COMPOSE MUST BE REBUILT WITH `--build` !!
CELERY_BEAT_SCHEDULE = {
    "check_clocked_in_users": {
        "task": "auth_app.tasks.check_clocked_in_users",
        "schedule": crontab(hour=23, minute=0),
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = os.getenv("TZ", "Australia/Perth")

USE_I18N = True

USE_TZ = True


# This is used for public holiday information: (https://date.nager.at/)
COUNTRY_CODE = "AU"
COUNTRY_SUBDIV_CODE = "WA"
UTC_OFFSET = "8"  # For UTC+8


# Default notification expiration date
NOTIFICATION_DEFAULT_EXPIRY_LENGTH_DAYS = 21

# Rounding amount for calculating true shift length
SHIFT_ROUNDING_MINS = 15  # Default is 15min

# How long a user must wait between finishing a shift and starting a new one
START_NEW_SHIFT_TIME_DELTA_THRESHOLD_MINS = 30  # Default is 30m

# How long a user must wait between starting a shift and finishing it
FINISH_SHIFT_TIME_DELTA_THRESHOLD_MINS = 15  # Default is 15m

# Determine maximum possible dump size for db queries (i.e. employee details list)
MAX_DATABASE_DUMP_LIMIT = 150

# Define minimum and maximum password length
PASSWORD_MIN_LENGTH = 6
PASSWORD_MAX_LENGTH = 50  # DB is max 256 chars however it gets hashed so keep below 100

# Define a pattern for valid fields
VALID_NAME_PATTERN = (
    r"^[a-zA-Z\s\-']+$"  # Allows letters, spaces, hyphens, and apostrophes
)
VALID_NAME_LIST_PATTERN = r"^[a-zA-Z\s\-',]+$"  # Allows commas as well
VALID_PHONE_NUMBER_PATTERN = r"^[0-9\s\-\+]+$"  # Allows nums, spaces, dashes, +
VALID_PASSWORD_PATTERN = r"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)"  # Must have 1 lower case, 1 upper case and 1 number


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "auth_app/static")]
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"  # Adds hash to static files to ensure client side caching does not introduce problems when updating code.


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{levelname}] [{module}] {asctime}: {message}",
            "style": "{",
        },
        "simple": {
            "format": "[{levelname}] {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": os.getenv("LOG_LEVEL_CONSOLE", "INFO").upper(),
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "level": os.getenv("LOG_LEVEL_FILE", "DEBUG").upper(),
            "class": "logging.FileHandler",
            "filename": "./debug.log",
            "formatter": "verbose",
        },
        "tasks": {
            "level": os.getenv("LOG_LEVEL_TASKS_FILE", "DEBUG").upper(),
            "class": "logging.FileHandler",
            "filename": "./tasks.log",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "DEBUG",  # Minimum level this logger will process
            "propagate": False,
        },
        "api": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "auth_app": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "celery": {  # Celery-specific logger
            "handlers": ["console", "tasks"],
            "level": "INFO",
            "propagate": False,
        },
        "celery_beat": {  # Celery Beat-specific logger
            "handlers": ["console", "tasks"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
    "root": {  # Root logger for broader debugging
        "handlers": ["console"],
        "level": "DEBUG",
    },
}
